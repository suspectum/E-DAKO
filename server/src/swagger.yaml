openapi: 3.0.1
info:
  title: Node.js API
  description: Node.js + MongoDB - API with email sign-up, verification, authentication, forgot password and Transaction CRUD
  version: 1.0.0
servers:
  - url: http://localhost:4000
    description: Local development server
  - url: https://edako-budget-tracker.herokuapp.com/
    description: Production server
tags:
  - name: accounts
  - name: transactions
paths:
  # ================================ || ACCOUNT ROUTES ||================================ #

  #  ======= || Register || ======= #
  /accounts/register:
    post:
      tags:
        - accounts
      summary: Register a new user account and send a verification email
      description: The first account registered in the system is assigned the `Admin` role, other accounts are assigned the `User` role.
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/CreateUser'
                - $ref: '#/components/schemas/AcceptTerms'

      responses:
        '200':
          description: The registration request was successful and a verification email has been sent to the specified email address
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Registration successful, please check your email for verification instructions

  #  ======= || Verify Email || ======= #
  /accounts/verify-email:
    post:
      tags:
        - accounts
      summary: Verify a new account with a verification token received by email after registration
      operationId: verifyEmail
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailVerifyToken'
      responses:
        '200':
          description: Verification was successful so you can now login to the account
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Verification successful, you can now login
        '400':
          description: Verification failed due to an invalid token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Verification failed

  #  ======= || Authenticate || ======= #
  /accounts/authenticate:
    post:
      tags:
        - accounts
      summary: Authenticate account credentials and return a JWT token and a cookie with a refresh token
      description: Accounts must be verified before authenticating.
      operationId: authenticate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignIn'
      responses:
        '200':
          description: Account details, a JWT access token and a refresh token cookie
          headers:
            Set-Cookie:
              description: '`refreshToken`'
              schema:
                $ref: '#/components/schemas/RefreshTokenCookie'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/User'
                  - $ref: '#/components/schemas/JWT'

        '400':
          description: The email or password is incorrect
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Email or password is incorrect

  #  ======= || Refresh Token || ======= #
  /accounts/refresh-token:
    post:
      tags:
        - accounts
      summary: Use a refresh token to generate a new JWT token and a new refresh token
      description: The refresh token is sent and returned via cookies.
      operationId: refreshToken
      parameters:
        - in: cookie
          name: refreshToken
          description: The `refreshToken` cookie
          schema:
            $ref: '#/components/schemas/RefreshToken'
      responses:
        '200':
          description: Account details, a JWT access token and a new refresh token cookie
          headers:
            Set-Cookie:
              description: '`refreshToken`'
              schema:
                $ref: '#/components/schemas/RefreshTokenCookie'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

        '400':
          description: The refresh token is invalid, revoked or expired
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid token

  #  ======= || Revoke Refresh Token || ======= #
  /accounts/revoke-token:
    post:
      tags:
        - accounts
      summary: Revoke a refresh token
      description: Admin users can revoke the tokens of any account, regular users can only revoke their own tokens.
      operationId: revokeToken
      security:
        - bearerAuth: []
      parameters:
        - in: cookie
          name: refreshToken
          description: The refresh token can be sent in a cookie or the post body, if both are sent the token in the body is used.
          schema:
            $ref: '#/components/schemas/RefreshToken'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  $ref: '#/components/schemas/RefreshToken'

      responses:
        '200':
          description: The refresh token was successfully revoked
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Token revoked
        '400':
          description: The refresh token is invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid token
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  #  ======= || Forgot Password || ======= #
  /accounts/forgot-password:
    post:
      tags:
        - accounts
      summary: Submit email address to reset the password on an account
      operationId: forgotPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgetPassword'
      responses:
        '200':
          description: The request was received and an email has been sent to the specified address with password reset instructions (if the email address is associated with an account)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Please check your email for password reset instructions

  #  ======= || Validate Reset Token || ======= #
  /accounts/validate-reset-token:
    post:
      tags:
        - accounts
      summary: Validate the reset password token received by email after submitting to the /accounts/forgot-password route
      operationId: validateResetToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailVerifyToken'
      responses:
        '200':
          description: Token is valid
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Token is valid
        '400':
          description: Token is invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid token

  #  ======= || Reset Password || ======= #
  /accounts/reset-password:
    post:
      tags:
        - accounts
      summary: Reset the password for an account
      operationId: resetPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPassword'
      responses:
        '200':
          description: Password reset was successful so you can now login to the account with the new password
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password reset successful, you can now login
        '400':
          description: Password reset failed due to an invalid token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid token

  #  ======= || Get Users || ======= #
  /accounts/users:
    get:
      tags:
        - accounts
      summary: Get a list of all accounts
      description: Restricted to admin users.
      operationId: getAllAccounts
      security:
        - bearerAuth: []
      responses:
        '200':
          description: An array of all accounts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  #  ======= || Create Account || ======= #
  /accounts:
    post:
      tags:
        - accounts
      summary: Create a new account
      description: Restricted to admin users.
      operationId: createAccount
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/CreateUser'
                - $ref: '#/components/schemas/UserRole'
      responses:
        '200':
          description: Account created successfully, verification is not required for accounts created with this endpoint. The details of the new account are returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Email is already registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Email ' johndoe@example.com' is already registered
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  #  ======= || ACCOUNT CRUD(There is no Create :D) || ======= #
  /accounts/user/{id}:
    parameters:
      - in: path
        name: id
        description: Account id
        required: true
        example: 614f5783e6931b9ac2c74f8d
        schema:
          type: string

    #  ======= || Get Account By ID || ======= #
    get:
      tags:
        - accounts
      summary: Get a single account by id
      description: Admin users can access any account, regular users are restricted to their own account.
      operationId: getAccountById
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Details of the specified account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

    #  ======= || Update Account || ======= #
    put:
      tags:
        - accounts
      summary: Update an account
      description: Admin users can update any account including role, regular users are restricted to their own account and cannot update role.
      operationId: updateAccount
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'

      responses:
        '200':
          description: Account updated successfully. The details of the updated account are returned.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/User'
                  - $ref: '#/components/schemas/Updated'

        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

    #  ======= || Delete Account || ======= #
    delete:
      tags:
        - accounts
      summary: Delete an account
      description: Admin users can delete any account, regular users are restricted to their own account.
      operationId: deleteAccount
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Account deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Account deleted successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  # ================================ || TRANSACTION ROUTES ||================================ #

  #  ======= || Create Transaction || ======= #
  /transactions:
    post:
      tags:
        - transactions
      summary: Create a new transaction
      operationId: addTransaction
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTransactions'

      responses:
        '200':
          description: Transaction created successfully. The details of the new transaction are returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'

        '401':
          $ref: '#/components/responses/UnauthorizedError'

  #  ======= || Get Transaction By Filter|| ======= #
  /transactions/filter/:
    get:
      tags:
        - transactions
      summary: Get transactions by limit or date range
      description: The signed in user can access their own transactions.
      operationId: getTransactions
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: start
          description: Filter's start date. Req. only if prefer to filter by date range.
          required: false
          example: Sun Oct 24 2021 00:00:00 GMT-0400 (Eastern Daylight Time)
          schema:
            type: string
        - in: query
          name: end
          description: Filter's end date. Req. only if prefer to filter by date range.
          required: false
          example: Tue Nov 23 2021 23:59:59 GMT-0500 (Eastern Standard Time)
          schema:
            type: string
        - in: query
          name: limit
          description: The `limit` and `start-end` are sent together, if limit is `undefined` start-end is used.
          required: false
          example: 'undefined'
          schema:
            type: string
      responses:
        '200':
          description: An array of specified transactions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          description: When limit is used, it should be positive number, otherwise leave as `undefined`
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: the limit must be positive

  #  ======= || TRANSACTION CRUD(There is no Create :D) || ======= #
  /transactions/{id}:
    parameters:
      - in: path
        name: id
        description: Transaction id
        required: true
        example: 61916ac34bb3f8b265f372d2
        schema:
          type: string

    #  ======= || Update Transaction || ======= #
    put:
      tags:
        - transactions
      summary: Update an transaction
      description: The signed in user can update their own transaction.
      operationId: editTransaction
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTransaction'

      responses:
        '200':
          description: Transaction updated successfully. The details of the updated transaction are returned.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Transaction'
                  - $ref: '#/components/schemas/Updated'

        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

    #  ======= || Delete Transaction || ======= #
    delete:
      tags:
        - transactions
      summary: Delete an transaction
      description: The signed in user can delete their own transaction.
      operationId: deleteTransaction
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Transaction deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Transaction deleted successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  #  ======= || Get Transactions Sum || ======= #
  /transactions/:
    get:
      tags:
        - transactions
      summary: Get transactions all time sum by type and groupped by year-month
      description: The signed in user can access their own transactions.
      operationId: getTransactionsSum
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: type
          description: Transaction type
          required: false
          example: Income
          schema:
            type: string
      responses:
        '200':
          description: An array of specified transactions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GroupedTransactions'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

components:
  schemas:
    # ================================ || ACCOUNT SCHEMAS ||================================ #

    #  ======= || SignIn Schema || ======= #
    SignIn:
      type: object
      properties:
        email:
          type: string
          example: johndoe@example.com
        password:
          type: string
          example: 'pass123'
      required:
        - email
        - password

    #  ======= || RefreshToken Schema || ======= #
    RefreshToken:
      type: string
      example: dc49b1fe46a437239e6cd100f2c97ab59113e411b8598b50b14e38a256d51e9920ff1853404d1479

    #  ======= || RefreshTokenCookie Schema || ======= #
    RefreshTokenCookie:
      type: string
      example: refreshToken=dc49b1fe46a437239e6cd100f2c97ab59113e411b8598b50b14e38a256d51e9920ff1853404d1479; Path=/; Expires=Tue, 30 Nov 2021 17:08:07 GMT; HttpOnly

    #  ======= || JWT Schema || ======= #
    JWT:
      type: object
      properties:
        jwtToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI2MTRmNTc4M2U2OTMxYjlhYzJjNzRmOGQiLCJpZCI6IjYxNGY1NzgzZTY5MzFiOWFjMmM3NGY4ZCIsImlhdCI6MTYzNzY4NzI4NywiZXhwIjoxNjM3Njg4MTg3fQ.i_x5GmEGWjVDbLgceNcSXBUdAobgQkMOzmVolFJyqeE

    #  ======= || User Schema || ======= #
    User:
      type: object
      properties:
        id:
          type: string
          example: 614f5783e6931b9ac2c74f8d
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        email:
          type: string
          example: johndoe@example.com
        role:
          type: string
          example: Admin
        created:
          type: string
          example: '2021-09-25T17:08:19.346Z'
        isVerified:
          type: boolean
          example: true

    #  ======= || CreateUser Schema || ======= #
    CreateUser:
      type: object
      properties:
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        email:
          type: string
          example: johndoe@example.com
        password:
          type: string
          example: pass123
        confirmPassword:
          type: string
          example: pass123
        acceptTerms:
          type: boolean
      required:
        - firstName
        - lastName
        - email
        - password
        - confirmPassword
        - acceptTerms

    #  ======= || AcceptTerms Schema || ======= #
    AcceptTerms:
      type: object
      properties:
        acceptTerms:
          type: boolean
      required:
        - acceptTerms

    #  ======= || UserRole Schema || ======= #
    UserRole:
      type: object
      properties:
        role:
          type: string
          enum:
            - Admin
            - User
      required:
        - role

    #  ======= || EmailVerifyToken Schema || ======= #
    EmailVerifyToken:
      type: object
      properties:
        token:
          type: string
          example: 3a7e92f9c6b925cc7101cf01ab2922ee47ce28bd60c8a7c50fbfca12c7a5c219ac78d466ba50d647
      required:
        - token

    #  ======= || ForgetPassword Schema || ======= #
    ForgetPassword:
      type: object
      properties:
        email:
          type: string
          example: johndoe@example.com
      required:
        - email

    #  ======= || ResetPassword Schema || ======= #
    ResetPassword:
      type: object
      properties:
        token:
          type: string
          example: e085e72bc290d2127e6ece8e0c595bf92f298bb6ef822f5a83d5fc22349fd788972ca0a6759564c1
        password:
          type: string
          example: newPass123
        confirmPassword:
          type: string
          example: newPass123
      required:
        - token
        - password
        - confirmPassword

    #  ======= || UpdateUser Schema || ======= #
    UpdateUser:
      type: object
      properties:
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        email:
          type: string
          example: johndoe@example.com
        password:
          type: string
          example: pass123
        confirmPassword:
          type: string
          example: pass123
        role:
          type: string
          enum:
            - Admin
            - User

    # ================================ || TRANSACTION SCHEMAS ||================================ #

    #  ======= || CreateTransactions Schema || ======= #
    CreateTransactions:
      type: object
      properties:
        type:
          type: string
          example: Income
        category:
          type: string
          example: Salary
        amount:
          type: number
          example: '5000.50'
        date:
          type: string
          example: Fri Nov 12 2021 20:16:05 GMT-0400 (Eastern Daylight Time)
      required:
        - type
        - category
        - amount
        - date

    #  ======= || Transaction Schema || ======= #
    Transaction:
      type: object
      properties:
        type:
          type: string
          example: Income
        category:
          type: string
          example: Salary
        amount:
          type: number
          example: '6000.49'
        date:
          type: string
          example: '2021-10-13T00:16:05.000Z'
        created:
          type: string
          example: '2021-11-22T16:15:08.981Z'
        account:
          type: string
          example: 614f5783e6931b9ac2c74f8d
        id:
          type: string
          example: 619bc20cf034d3a2e67f4302

    #  ======= || UpdateTransaction Schema || ======= #
    UpdateTransaction:
      type: object
      properties:
        type:
          type: string
          example: Income
        category:
          type: string
          example: Gifts
        amount:
          type: number
          example: 33.44
        date:
          type: string
          example: '2021-10-13T00:16:05.000Z'

    #  ======= || Updated Schema || ======= #
    Updated:
      type: object
      properties:
        updated:
          type: string
          example: '2021-11-23T21:42:54.996Z'

    #  ======= || GroupedTransactions Schema || ======= #
    GroupedTransactions:
      type: object
      properties:
        amount:
          type: number
          example: 329857.3
        id:
          type: object
          example:
            year: 2021
            month: 9

  responses:
    UnauthorizedError:
      description: Access token is missing or invalid, or the user does not have access to perform the action
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Unauthorized
    NotFoundError:
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Not Found

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
